                                                                Day 5
Permutations of a given string
MediumAccuracy: 34.65%Submissions: 188K+Points: 4

Given a string S. The task is to print all unique permutations of the given string in lexicographically sorted order.
 
Example 1:
Input: ABC
Output:
ABC ACB BAC BCA CAB CBA
Explanation:
Given string ABC has permutations in 6 
forms as ABC, ACB, BAC, BCA, CAB and CBA .
Example 2:
Input: ABSG
Output:
ABGS ABSG AGBS AGSB ASBG ASGB BAGS 
BASG BGAS BGSA BSAG BSGA GABS GASB 
GBAS GBSA GSAB GSBA SABG SAGB SBAG 
SBGA SGAB SGBA
Explanation:
Given string ABSG has 24 permutations.
 
Your Task:  
You don't need to read input or print anything. Your task is to complete the function find_permutaion() which takes the string S as input parameter and returns a vector of string in lexicographical order.
 
Expected Time Complexity: O(n! * n)
Expected Space Complexity: O(n)
 
Constraints:
1 <= length of string <= 5

--------------------------------------------------------------------------------------------------------
Code- 
//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{	public:
	 void permutation(string s,int start,int end,set<string>&ans)
 {
     if(start>=end)
     {
         string t(s);
         ans.insert(t);
         return;
     }
     for(int i=start;i<=end;i++)
              {
                  //sort(s.begin()+start,s.end());
                  swap(s[i],s[start]);
                  permutation(s,start+1,end,ans);
                  swap(s[i],s[start]);
              }


 }
		vector<string>find_permutation(string S)
		{vector<string> ans;
     sort(S.begin(),S.end());
     set<string>set_string;
     permutation(S,0,S.length()-1,set_string);
     for(auto x:set_string)
     {
         ans.push_back(x);
     }
     return ans;
 }  
};
//{ Driver Code Starts.
int main(){
    int t;
    cin >> t;
    while(t--)
    {
	    string S;
	    cin >> S;
	    Solution ob;
	    vector<string> ans = ob.find_permutation(S);
	    for(auto i: ans)
	    {
	    	cout<<i<<" ";
	    }
	    cout<<"\n";
    }
	return 0;
}

// } Driver Code Ends

Time complexity- O(n!)
Space complexity -O(n)


 
