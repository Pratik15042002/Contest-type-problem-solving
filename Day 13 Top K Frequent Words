
					Day 13
692. Top K Frequent Words
Medium
6.7K
315
Companies
Given an array of strings words and an integer k, return the k most frequent strings.
Return the answer sorted by the frequency from highest to lowest. Sort the words with the same frequency by their lexicographical order.
 
Example 1:
Input: words = ["i","love","leetcode","i","love","coding"], k = 2
Output: ["i","love"]
Explanation: "i" and "love" are the two most frequent words.
Note that "i" comes before "love" due to a lower alphabetical order.
Example 2:
Input: words = ["the","day","is","sunny","the","the","the","sunny","is","is"], k = 4
Output: ["the","is","sunny","day"]
Explanation: "the", "is", "sunny" and "day" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively.
 
Constraints:
•	1 <= words.length <= 500
•	1 <= words[i].length <= 10
•	words[i] consists of lowercase English letters.
•	k is in the range [1, The number of unique words[i]]
 
Follow-up: Could you solve it in O(n log(k)) time and O(n) extra space?

Code -class Solution {
public:
    vector<string> topKFrequent(vector<string>& words, int k) {
        
        map<string, int>word_db;
        int words_size= words.size();
        for(int i=0; i<words_size; i++){
            word_db[words[i]]++;
        }

        priority_queue<pair<int, string>>top_k;
        for(auto &it: word_db){
            top_k.push(make_pair(-it.second, it.first));
            if(top_k.size() > k){
                top_k.pop();
            }
        }

        vector<pair<int, string>>candidate_list;
        while(!top_k.empty()){
            candidate_list.emplace_back(top_k.top());
            top_k.pop();
        }
        sort(candidate_list.begin(), candidate_list.end());


        vector<string>ans;
        for(int i=0; i<candidate_list.size(); i++){
            ans.push_back(candidate_list[i].second);
        }
        return ans;
    }
};


 
--------------------------------------------------------------------------------------------------------------------------------------
Time complexity – O(nlogn)
Space complexity – O(n)
