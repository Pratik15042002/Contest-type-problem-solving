					Day 28
Code-
743. Network Delay Time
Medium
6.1K
331
Companies
You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.
We will send a signal from a given node k. Return the minimum time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.
 
Example 1:
 
Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2
Output: 2
Example 2:
Input: times = [[1,2,1]], n = 2, k = 1
Output: 1
Example 3:
Input: times = [[1,2,1]], n = 2, k = 2
Output: -1
 
Constraints:
•	1 <= k <= n <= 100
•	1 <= times.length <= 6000
•	times[i].length == 3
•	1 <= ui, vi <= n
•	ui != vi
•	0 <= wi <= 100
•	All the pairs (ui, vi) are unique. (i.e., no multiple edges.)

 class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
       
        unordered_map<int,list<pair<int,int>>> adj;
        for(int i = 0 ; i < times.size() ; i++){
            int u = times[i][0] - 1;
            int v = times[i][1] - 1;
            int w = times[i][2];
            
            adj[u].push_back(make_pair(v,w));
        }

             vector<int> dist(n);
        for(int i = 0 ; i < n ; i++){
            dist[i] = INT_MAX;
        }

       
        set<pair<int,int>> st;
        dist[k-1] = 0;
        st.insert(make_pair(0,k-1));
        
        while(!st.empty()){
            auto front = *(st.begin());
            int nodeDistance = front.first;
            int node = front.second;
            st.erase(st.begin());
            
       
            for(auto i : adj[node]){
                if(nodeDistance + i.second < dist[i.first]){
       
                    auto record = st.find(make_pair(dist[i.first] , i.first));
                    
                    if(record != st.end()){
                        st.erase(record);
                    }
                    
                    dist[i.first] = nodeDistance + i.second ;
                    st.insert(make_pair(dist[i.first] , i.first));
                }
            }
        }

        int maxi = -1;
        for(int i = 0 ; i < n ; i++){
            if(dist[i] == INT_MAX)
                return -1;
            else{
                maxi = max(maxi , dist[i]);
            }
        }
        return maxi;
    }
};

Time complexity- O(ElogV)
Space complexity- (E*V)

--------------------------------------------------------------------------------------------------------------------------------------
. 
