Day 23
140. Word Break II
Hard
5.9K
499
Companies
Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.
Note that the same word in the dictionary may be reused multiple times in the segmentation.
 
Example 1:
Input: s = "catsanddog", wordDict = ["cat","cats","and","sand","dog"]
Output: ["cats and dog","cat sand dog"]
Example 2:
Input: s = "pineapplepenapple", wordDict = ["apple","pen","applepen","pine","pineapple"]
Output: ["pine apple pen apple","pineapple pen apple","pine applepen apple"]
Explanation: Note that you are allowed to reuse a dictionary word.
Example 3:
Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: []
 
Constraints:
•	1 <= s.length <= 20
•	1 <= wordDict.length <= 1000
•	1 <= wordDict[i].length <= 10
•	s and wordDict[i] consist of only lowercase English letters.
•	All the strings of wordDict are unique.

class Solution {
public:
    vector<string> wordBreak(string s, vector<string>& w) {

        int n = s.length();

        vector<pair<int, vector<string>>> dp(n + 1);

        dp[0] = {1, {""}};

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j < w.size(); j++) {
                int len = w[j].length();
                if (i - len >= 0) {
                    if (dp[i - len].first == 1) {
                        string x = s.substr(i - len, len);
                        if (x == w[j]) {
                            dp[i].first = 1;
                            vector<string> v = dp[i - len].second;
                            for (int l = 0; l < v.size(); l++) {
                                if (i - len != 0) {
                                    v[l] += " ";
                                }
                                v[l] += x;
                                dp[i].second.push_back(v[l]);
                            }
                        }
                    }
                }
            }
        }

        return dp[n].second;

    }
};

Time Complexity- O(N3)
Space Complexity- O(N2)

 
