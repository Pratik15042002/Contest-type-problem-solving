					Day 20

2426. Number of Pairs Satisfying Inequality
Hard
388
8
Companies
You are given two 0-indexed integer arrays nums1 and nums2, each of size n, and an integer diff. Find the number of pairs (i, j) such that:
•	0 <= i < j <= n - 1 and
•	nums1[i] - nums1[j] <= nums2[i] - nums2[j] + diff.
Return the number of pairs that satisfy the conditions.
 
Example 1:
Input: nums1 = [3,2,5], nums2 = [2,2,1], diff = 1
Output: 3
Explanation:
There are 3 pairs that satisfy the conditions:
1. i = 0, j = 1: 3 - 2 <= 2 - 2 + 1. Since i < j and 1 <= 1, this pair satisfies the conditions.
2. i = 0, j = 2: 3 - 5 <= 2 - 1 + 1. Since i < j and -2 <= 2, this pair satisfies the conditions.
3. i = 1, j = 2: 2 - 5 <= 2 - 1 + 1. Since i < j and -3 <= 2, this pair satisfies the conditions.
Therefore, we return 3.
Example 2:
Input: nums1 = [3,-1], nums2 = [-2,2], diff = -1
Output: 0
Explanation:
Since there does not exist any pair that satisfies the conditions, we return 0.
 
Constraints:
•	n == nums1.length == nums2.length
•	2 <= n <= 105
•	-104 <= nums1[i], nums2[i] <= 104
•	-104 <= diff <= 104

Code- 
class Solution {
public:
     long long ans=0;
   
       vector<int>fun(int i,int j,int diff,vector<int>&nums)
       {
           
           if(i==j)return {nums[j]};
             int mid=(i+j)/2;
              vector<int>left=fun(i,mid,diff,nums);
              vector<int>right=fun(mid+1,j,diff,nums);
              int y=0;
               for(int x=0;x<right.size();x++)
               {
                   while(y<left.size()&&right[x]+diff>=left[y])y++;
                   ans+=y;
               }
            vector<int>new_v(left.size()+right.size());
            merge(left.begin(),left.end(),right.begin(),right.end(),new_v.begin());
            sort(new_v.begin(),new_v.end());
            return new_v;

       }
    long long numberOfPairs(vector<int>& nums1, vector<int>& nums2, int diff) {
        vector<int>nums;
        for(int i=0;i<nums1.size();i++)
        {
            nums.push_back(nums1[i]-nums2[i]);
        }
     fun(0,nums.size()-1,diff,nums);
     return ans;
        
    }
};
-----------------------------------------------------------------------------------------------------------
Time complexity – O(nlogn)
Space complexity -O(n)

 
